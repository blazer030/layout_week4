@for $key from 0 to 16 {
    //margin
    .mt-#{$key} {
        margin-top: $spacer*$key*.25;
    }

    .mb-#{$key} {
        margin-bottom: $spacer*$key*.25;
    }

    .ms-#{$key} {
        margin-left: $spacer*$key*.25;
    }

    .me-#{$key} {
        margin-right: $spacer*$key*.25;
    }

    .mx-#{$key} {
        margin-left: $spacer*$key*.25;
        margin-right: $spacer*$key*.25;
    }

    .my-#{$key} {
        margin-top: $spacer*$key*.25;
        margin-bottom: $spacer*$key*.25;
    }

    //padding
    .pt-#{$key} {
        padding-top: $spacer*$key*.25;
    }

    .pb-#{$key} {
        padding-bottom: $spacer*$key*.25;
    }

    .ps-#{$key} {
        padding-left: $spacer*$key*.25;
    }

    .pe-#{$key} {
        padding-right: $spacer*$key*.25;
    }

    .px-#{$key} {
        padding-left: $spacer*$key*.25;
        padding-right: $spacer*$key*.25;
    }

    .py-#{$key} {
        padding-top: $spacer*$key*.25;
        padding-bottom: $spacer*$key*.25;
    }
}

@each $breakpoints, $value in reverse($grid-breakpoints) {
    $next: breakpoint-next($breakpoints);
    @if $next != null {
        @include media-breakpoint-down($next) {
            @for $key from 0 to 16 {
                //margin
                .mt-#{$breakpoints}-#{$key} {
                    margin-top: $spacer*$key*.25;
                }
            
                .mb-#{$breakpoints}-#{$key} {
                    margin-bottom: $spacer*$key*.25;
                }
            
                .ms-#{$breakpoints}-#{$key} {
                    margin-left: $spacer*$key*.25;
                }
            
                .me-#{$breakpoints}-#{$key} {
                    margin-right: $spacer*$key*.25;
                }
            
                .mx-#{$breakpoints}-#{$key} {
                    margin-left: $spacer*$key*.25;
                    margin-right: $spacer*$key*.25;
                }
            
                .my-#{$breakpoints}-#{$key} {
                    margin-top: $spacer*$key*.25;
                    margin-bottom: $spacer*$key*.25;
                }
            
                //padding
                .pt-#{$breakpoints}-#{$key} {
                    padding-top: $spacer*$key*.25;
                }
            
                .pb-#{$breakpoints}-#{$key} {
                    padding-bottom: $spacer*$key*.25;
                }
            
                .ps-#{$breakpoints}-#{$key} {
                    padding-left: $spacer*$key*.25;
                }
            
                .pe-#{$breakpoints}-#{$key} {
                    padding-right: $spacer*$key*.25;
                }
            
                .px-#{$breakpoints}-#{$key} {
                    padding-left: $spacer*$key*.25;
                    padding-right: $spacer*$key*.25;
                }
            
                .py-#{$breakpoints}-#{$key} {
                    padding-top: $spacer*$key*.25;
                    padding-bottom: $spacer*$key*.25;
                }
            }
        }
    }
}

.mx-auto {
    margin-right: auto;
    margin-left: auto;
}

.d-flex {
    display: flex;
}

.d-inline-flex {
    display: inline-flex;
}

.flex-row {
    flex-direction: row;
}

.flex-row-reverse {
    flex-direction: row-reverse;
}

.flex-column {
    flex-direction: column;
}

.flex-column-reverse {
    flex-direction: column-reverse;
}

.justify-content-start {
    justify-content: flex-start;
}

.justify-content-end {
    justify-content: flex-end;
}

.justify-content-center {
    justify-content: center;
}

.justify-content-between {
    justify-content: space-between;
}

.justify-content-around {
    justify-content: space-around;
}

.align-items-start {
    align-items: flex-start;
}

.align-items-end {
    align-items: flex-end;
}

.align-items-center {
    align-items: center;
}

.align-self-start{
    align-self: start;
}

.align-self-end{
    align-self: end;
}

.align-self-center{
    align-self: center;
}

.flex-nowrap {
    flex-wrap: nowrap;
}

.flex-wrap {
    flex-wrap: wrap;
}


@each $breakpoints, $value in reverse($grid-breakpoints) {
    $next: breakpoint-next($breakpoints);
    @if $next != null {
        @include media-breakpoint-down($next) {
            .d-#{$breakpoints}-flex {
                display: flex;
            }
    
            .d-#{$breakpoints}-inline-flex {
                display: inline-flex;
            }
    
            .flex-#{$breakpoints}-row {
                flex-direction: row;
            }
    
            .flex-#{$breakpoints}-row-reverse {
                flex-direction: row-reverse;
            }
    
            .flex-#{$breakpoints}-column {
                flex-direction: column;
            }
    
            .flex-#{$breakpoints}-column-reverse {
                flex-direction: column-reverse;
            }
    
            .justify-content-#{$breakpoints}-start {
                justify-content: flex-start;
            }
    
            .justify-content-#{$breakpoints}-end {
                justify-content: flex-end;
            }
    
            .justify-content-#{$breakpoints}-center {
                justify-content: center;
            }
    
            .justify-content-#{$breakpoints}-between {
                justify-content: space-between;
            }
    
            .justify-content-#{$breakpoints}-around {
                justify-content: space-around;
            }
    
            .align-items-#{$breakpoints}-start {
                align-items: flex-start;
            }
            
            .align-items-#{$breakpoints}-end {
                align-items: flex-end;
            }
            
            .align-items-#{$breakpoints}-center {
                align-items: center;
            }
    
            .align-self-#{$breakpoints}-start{
                align-self: start;
            }
            
            .align-self-#{$breakpoints}-end{
                align-self: end;
            }
            
            .align-self-#{$breakpoints}-center{
                align-self: center;
            }
    
            .flex-#{$breakpoints}-nowrap {
                flex-wrap: nowrap;
            }
            
            .flex-#{$breakpoints}-wrap {
                flex-wrap: wrap;
            }
        }
    }
}

@each $key in 1,2,3,4 {
    .w-#{$key*25} {
        width: $key*25%;
    }
}

@each $breakpoints, $value in reverse($grid-breakpoints) {
    $next: breakpoint-next($breakpoints);
    @if $next != null {
        @include media-breakpoint-down($next) {
            @each $key in 1,2,3,4 {
                .w-#{$breakpoints}-#{$key*25} {
                    width: $key*25%;
                }
            }
        }
    }
}

.fw-bold {
    font-weight: bold;
}

.fw-bolder {
    font-weight: bolder;
}

.fw-normal {
    font-weight: normal;
}

.fw-lighter {
    font-weight: lighter;
}

.fst-italic {
    font-style: italic;
}

.fst-normal {
    font-style: normal;
}